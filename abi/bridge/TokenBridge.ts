/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TokenBridgeInterface extends utils.Interface {
  functions: {
    "addLiquidity(uint256,uint256,address)": FunctionFragment;
    "addLiquidityETH(uint256)": FunctionFragment;
    "addLiquidityProvider(address,uint256)": FunctionFragment;
    "bridge()": FunctionFragment;
    "estimateFee(uint16,uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "factory()": FunctionFragment;
    "initialize()": FunctionFragment;
    "liquidityProviders(address,uint256)": FunctionFragment;
    "nativeTokenPoolId()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLiquidity(uint256,uint256)": FunctionFragment;
    "removeLiquidityProvider(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBridge(address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setNativeTokenPoolId(uint256)": FunctionFragment;
    "setNativeTokenVault(address)": FunctionFragment;
    "transferETH(uint16,uint256,uint256,address,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToken(uint16,uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "withdraw(uint256,uint256,address)": FunctionFragment;
    "zkBridgeNativeTokenVault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "addLiquidityETH"
      | "addLiquidityProvider"
      | "bridge"
      | "estimateFee"
      | "factory"
      | "initialize"
      | "liquidityProviders"
      | "nativeTokenPoolId"
      | "owner"
      | "removeLiquidity"
      | "removeLiquidityProvider"
      | "renounceOwnership"
      | "setBridge"
      | "setFactory"
      | "setNativeTokenPoolId"
      | "setNativeTokenVault"
      | "transferETH"
      | "transferOwnership"
      | "transferToken"
      | "withdraw"
      | "zkBridgeNativeTokenVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityProvider",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateFee",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityProviders",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokenPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityProvider",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBridge", values: [string]): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNativeTokenPoolId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNativeTokenVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferETH",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "zkBridgeNativeTokenVault",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokenPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNativeTokenPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNativeTokenVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zkBridgeNativeTokenVault",
    data: BytesLike
  ): Result;

  events: {
    "AddedLiquidityProvider(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewBridge(address)": EventFragment;
    "NewFactory(address)": EventFragment;
    "NewNativeTokenVault(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemovedLiquidityProvider(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedLiquidityProvider"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBridge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNativeTokenVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedLiquidityProvider"): EventFragment;
}

export interface AddedLiquidityProviderEventObject {
  nativeTokenVault: string;
  poolId: BigNumber;
}
export type AddedLiquidityProviderEvent = TypedEvent<
  [string, BigNumber],
  AddedLiquidityProviderEventObject
>;

export type AddedLiquidityProviderEventFilter =
  TypedEventFilter<AddedLiquidityProviderEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewBridgeEventObject {
  bridge: string;
}
export type NewBridgeEvent = TypedEvent<[string], NewBridgeEventObject>;

export type NewBridgeEventFilter = TypedEventFilter<NewBridgeEvent>;

export interface NewFactoryEventObject {
  factory: string;
}
export type NewFactoryEvent = TypedEvent<[string], NewFactoryEventObject>;

export type NewFactoryEventFilter = TypedEventFilter<NewFactoryEvent>;

export interface NewNativeTokenVaultEventObject {
  nativeTokenVault: string;
}
export type NewNativeTokenVaultEvent = TypedEvent<
  [string],
  NewNativeTokenVaultEventObject
>;

export type NewNativeTokenVaultEventFilter =
  TypedEventFilter<NewNativeTokenVaultEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemovedLiquidityProviderEventObject {
  nativeTokenVault: string;
  poolId: BigNumber;
}
export type RemovedLiquidityProviderEvent = TypedEvent<
  [string, BigNumber],
  RemovedLiquidityProviderEventObject
>;

export type RemovedLiquidityProviderEventFilter =
  TypedEventFilter<RemovedLiquidityProviderEvent>;

export interface TokenBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      poolId_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    addLiquidityProvider(
      liquidityProvider_: string,
      poolId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    estimateFee(
      dstChainId_: BigNumberish,
      srcPoolId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidityProviders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nativeTokenPoolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeLiquidityProvider(
      liquidityProvider_: string,
      poolId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBridge(
      bridge_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFactory(
      factory_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNativeTokenPoolId(
      nativeTokenPoolId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNativeTokenVault(
      vault_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferETH(
      dstChainId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferToken(
      dstChainId_: BigNumberish,
      srcPoolId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    zkBridgeNativeTokenVault(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidity(
    poolId_: BigNumberish,
    amount_: BigNumberish,
    recipient_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    poolId_: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  addLiquidityProvider(
    liquidityProvider_: string,
    poolId_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  bridge(overrides?: CallOverrides): Promise<string>;

  estimateFee(
    dstChainId_: BigNumberish,
    srcPoolId_: BigNumberish,
    dstPoolId_: BigNumberish,
    amount_: BigNumberish,
    recipient_: string,
    adapterParams_: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidityProviders(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nativeTokenPoolId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    poolId_: BigNumberish,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeLiquidityProvider(
    liquidityProvider_: string,
    poolId_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBridge(
    bridge_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFactory(
    factory_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNativeTokenPoolId(
    nativeTokenPoolId_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNativeTokenVault(
    vault_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferETH(
    dstChainId_: BigNumberish,
    dstPoolId_: BigNumberish,
    amount_: BigNumberish,
    recipient_: string,
    adapterParams_: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferToken(
    dstChainId_: BigNumberish,
    srcPoolId_: BigNumberish,
    dstPoolId_: BigNumberish,
    amount_: BigNumberish,
    recipient_: string,
    adapterParams_: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    poolId_: BigNumberish,
    amount_: BigNumberish,
    recipient_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  zkBridgeNativeTokenVault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidity(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityETH(
      poolId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityProvider(
      liquidityProvider_: string,
      poolId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bridge(overrides?: CallOverrides): Promise<string>;

    estimateFee(
      dstChainId_: BigNumberish,
      srcPoolId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    liquidityProviders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nativeTokenPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityProvider(
      liquidityProvider_: string,
      poolId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBridge(bridge_: string, overrides?: CallOverrides): Promise<void>;

    setFactory(factory_: string, overrides?: CallOverrides): Promise<void>;

    setNativeTokenPoolId(
      nativeTokenPoolId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNativeTokenVault(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferETH(
      dstChainId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToken(
      dstChainId_: BigNumberish,
      srcPoolId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zkBridgeNativeTokenVault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddedLiquidityProvider(address,uint256)"(
      nativeTokenVault?: null,
      poolId?: null
    ): AddedLiquidityProviderEventFilter;
    AddedLiquidityProvider(
      nativeTokenVault?: null,
      poolId?: null
    ): AddedLiquidityProviderEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewBridge(address)"(bridge?: null): NewBridgeEventFilter;
    NewBridge(bridge?: null): NewBridgeEventFilter;

    "NewFactory(address)"(factory?: null): NewFactoryEventFilter;
    NewFactory(factory?: null): NewFactoryEventFilter;

    "NewNativeTokenVault(address)"(
      nativeTokenVault?: null
    ): NewNativeTokenVaultEventFilter;
    NewNativeTokenVault(
      nativeTokenVault?: null
    ): NewNativeTokenVaultEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemovedLiquidityProvider(address,uint256)"(
      nativeTokenVault?: null,
      poolId?: null
    ): RemovedLiquidityProviderEventFilter;
    RemovedLiquidityProvider(
      nativeTokenVault?: null,
      poolId?: null
    ): RemovedLiquidityProviderEventFilter;
  };

  estimateGas: {
    addLiquidity(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addLiquidityETH(
      poolId_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    addLiquidityProvider(
      liquidityProvider_: string,
      poolId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    estimateFee(
      dstChainId_: BigNumberish,
      srcPoolId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    liquidityProviders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeTokenPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeLiquidityProvider(
      liquidityProvider_: string,
      poolId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBridge(
      bridge_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFactory(
      factory_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNativeTokenPoolId(
      nativeTokenPoolId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNativeTokenVault(
      vault_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferETH(
      dstChainId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferToken(
      dstChainId_: BigNumberish,
      srcPoolId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    zkBridgeNativeTokenVault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      poolId_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addLiquidityProvider(
      liquidityProvider_: string,
      poolId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateFee(
      dstChainId_: BigNumberish,
      srcPoolId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidityProviders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeTokenPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeLiquidityProvider(
      liquidityProvider_: string,
      poolId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBridge(
      bridge_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFactory(
      factory_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNativeTokenPoolId(
      nativeTokenPoolId_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNativeTokenVault(
      vault_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferETH(
      dstChainId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferToken(
      dstChainId_: BigNumberish,
      srcPoolId_: BigNumberish,
      dstPoolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      adapterParams_: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      poolId_: BigNumberish,
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    zkBridgeNativeTokenVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
